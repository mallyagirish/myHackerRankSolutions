import sys

def segCaptchaImg(captchaBGRImg):
    nRows = len(captchaBGRImg)
    
    # Convert the input BGR image to greyscale by averaging the 3 channels
    # Then convert to binary by performing a simple threshold.
    # The binary image has the character pixels set to 255 and the background set to 0.
    captchaBinImg = []
    for iRow in range(0, nRows):
        currRow = captchaBGRImg[iRow]
        bgrRow = list(i for i in currRow.split())
        
        binRow = []
        for bgrPixel in bgrRow:
            b,g,r = list(bgrPixel.split(","))
            grey = (float(b) + float(g) + float(r)) / 3
            binary = 255 if grey < 50 else 0
            
            binRow.append(binary)
    
        captchaBinImg.append(binRow)

    return captchaBinImg
    

def getCharsListFromCaptchaImg(captchaBGRImg):
    # Get the binary image for the input image i.e., 255 where character pixels are, and 0 elsewhere
    captchaBinImg = segCaptchaImg(captchaBGRImg)
    
    # Define dictionary that maps a binary image (in a list of lists format) to a character. This dictionary was computed offline using the sample captcha images.
    charBinImgToChar = {'[[255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 255, 0]]': 'E', '[[0, 0, 255, 255, 255, 255, 255, 0], [0, 255, 255, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 255, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 0, 255, 255], [0, 0, 255, 255, 255, 255, 255, 0]]': 'G', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0]]': 'Y', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 255, 255, 0, 0], [255, 255, 0, 255, 255, 0, 0, 0], [255, 255, 255, 255, 0, 0, 0, 0], [255, 255, 255, 255, 0, 0, 0, 0], [255, 255, 0, 255, 255, 0, 0, 0], [255, 255, 0, 0, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255]]': 'K', '[[255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 255, 255, 255, 0, 0, 0], [255, 255, 0, 0, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'R', '[[0, 0, 255, 255, 255, 255, 255, 0], [0, 255, 255, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 0, 255], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 255], [0, 255, 255, 0, 0, 0, 255, 255], [0, 0, 255, 255, 255, 255, 255, 0]]': 'C', '[[0, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 255, 255, 255, 0, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 255, 255, 0], [0, 255, 255, 255, 255, 255, 0, 0]]': '3', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 255, 255, 255, 0, 0], [255, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': '6', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': 'O', '[[255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 255, 255, 255, 0, 0], [255, 255, 255, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': '5', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 0, 0, 255, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'W', '[[0, 0, 0, 255, 255, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 255, 0, 0, 0, 255, 255, 0], [0, 255, 255, 0, 255, 255, 0, 0], [0, 0, 255, 255, 255, 0, 0, 0]]': 'J', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 0, 0, 0, 0], [0, 255, 255, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 255, 255]]': '2', '[[255, 255, 255, 255, 255, 255, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 0, 0, 0, 0], [0, 255, 255, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0]]': '7', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 255, 255, 0, 0, 255, 255, 0], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0]]': 'V', '[[255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 255, 0]]': 'L', '[[0, 255, 255, 255, 255, 255, 255, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 255, 255, 255, 255, 255, 255, 0]]': 'I', '[[0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 255, 0, 0, 0], [0, 255, 255, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 255, 255, 255, 255, 255, 255, 0]]': '1', '[[255, 255, 255, 255, 255, 255, 255, 255], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0]]': 'T', '[[0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'A', '[[255, 255, 255, 255, 255, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 0, 0, 0, 0], [0, 255, 255, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 255, 0]]': 'Z', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 0, 0, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'M', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 0, 255, 255, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 255]]': 'Q', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 0, 0, 0, 255, 255], [255, 255, 255, 255, 0, 0, 255, 255], [255, 255, 255, 255, 0, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 255, 255, 0, 255, 255], [255, 255, 0, 0, 255, 255, 255, 255], [255, 255, 0, 0, 0, 255, 255, 255], [255, 255, 0, 0, 0, 255, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'N', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 255], [0, 0, 255, 255, 255, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [0, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': '9', '[[255, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 255, 255, 255, 255, 0, 0]]': 'D', '[[0, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [0, 255, 255, 255, 255, 255, 255, 0], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [0, 0, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 255, 255, 255, 255, 0]]': 'S', '[[255, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 255, 255, 255, 255, 0, 0]]': 'B', '[[0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 255, 255, 255, 0], [0, 0, 0, 255, 255, 255, 255, 0], [0, 0, 255, 255, 0, 255, 255, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 255, 255, 0], [255, 255, 255, 255, 255, 255, 255, 255], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0], [0, 0, 0, 0, 0, 255, 255, 0]]': '4', '[[255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 255, 255, 255, 255, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0]]': 'P', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'X', '[[0, 0, 0, 255, 255, 0, 0, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 0, 0, 255, 255, 0, 0, 0]]': '0', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255]]': 'H', '[[0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0], [0, 255, 255, 0, 0, 255, 255, 0], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': '8', '[[255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [255, 255, 0, 0, 0, 0, 255, 255], [0, 255, 255, 0, 0, 255, 255, 0], [0, 0, 255, 255, 255, 255, 0, 0]]': 'U', '[[255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 255, 255, 255, 255, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0], [255, 255, 0, 0, 0, 0, 0, 0]]': 'F'}
    
    # Extract the binary image of each of the 5 characters in the captcha binary image. This is trivial - the bounding boxes are known because of the problem constraints.
    # Then use each binary image as key into the dictionary to get the corresponding text character.
    charsList = []
    for i in range(5):
        charBinImg = []
        for r in range(11,21):
            charBinImg.append(captchaBinImg[r][5+i*9:13+i*9])
            
        charsList.append(charBinImgToChar[repr(charBinImg)])
        
    return charsList
    
r,c = list(map(int, list(sys.stdin.readline().strip().split())))

img = []
for line in sys.stdin:
    img.append(line)

charsList = getCharsListFromCaptchaImg(img)
captchaStr = ''.join(charsList)
print(captchaStr)
